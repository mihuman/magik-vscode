{
	".source.magik": {
		"text_encoding": {
			"prefix": "text_encoding",
			"body": "#% text_encoding = utf8\n"
		},
		"_package": {
			"prefix": "package",
			"body": "_package ${1:user}\n"
		},
		"_endblock": {
			"prefix": "endblock",
			"body": "_endblock\n"
		},
		"_block @name _endblock": {
			"prefix": "block",
			"body": "_block ${1:@BLOCK_NAME} \n\t${2:# --- block body ---}\n_endblock\n"
		},
		"_dynamic": {
			"prefix": "dynamic",
			"body": "_dynamic ${1:VARIABLE_NAME} << ${2:VALUE}"
		},
		"_local": {
			"prefix": "local",
			"body": "_local ${1:VARIABLE_NAME} << ${2:VALUE}"
		},
		"_global": {
			"prefix": "global",
			"body": "_global ${1:VARIABLE_NAME} << ${2:VALUE}"
		},
		"_proc @name() _endproc": {
			"prefix": "pro name",
			"body": "_proc ${1:@PROC_NAME}() \n\t##\n\t##\n\t${2:# --- proc body ---}\n_endproc\n"
		},
		"_endproc": {
			"prefix": "endproc",
			"body": "_endproc\n"
		},
		"_loop _endloop": {
			"prefix": "loo",
			"body": [
				"_loop",
				"\t${1:# --- loop body ---}",
				"_endloop\n"]
		},
		"fast_elements()": {
			"prefix": "fast_elements",
			"body": "${1|fast_elements(),fast_keys_and_elements(),fast_elements_wrapped(start_index),fast_elements_in_pairs()|}"
		},
		"element...": {
			"prefix": "element",
			"body": "${1|an_element(),elements,all_elements_satisfying(a_predicate),all_elements_not_satisfying(a_predicate)|}"
		},
		"elements() _loop _endloop": {
			"prefix": "elements _loop",
			"body": [
				"${1|elements(),keys_and_elements(),keys_and_elements_in_reverse(),elements_in_reverse(),elements_satisfying(a_predicate),elements_not_satisfying(a_predicate)|}",
				"_loop",
				"\t${2:# --- loop body ---}",
				"_finally",
				"\t${3:# --- last iteration ---}",
				"_endloop\n"]
		},
		"_for simple loop": {
			"prefix": "for ",
			"body": [
				"_for ${1:element} _over ${2:COLLECTION}",
				"_loop",
				"\t${3:LOOP_BODY}",
				"_endloop"]
		},
		"_for keys_and_elements() _endloop": {
			"prefix": "for ",
			"body": [
				"_for key,element _over ${1:COLLECTION}.keys_and_elements()",
				"_loop",
				"\t${2:# --- loop body ---}",
				"_endloop\n"]
		},
		"_for elements() _endloop": {
			"prefix": "for ",
			"body": [
				"_for ${1:element} _over ${2:COLLECTION}.elements()",
				"_loop",
				"\t${3:# --- loop body ---}",
				"_endloop"]
		},
		"_over _endloop": {
			"prefix": "over ",
			"body": [
				"_over ${1:ITERATOR}()",
				"_loop",
				"\t${2:# --- loop body ---}",
				"_finally",
				"\t${3:# --- last iteration ---}",
				"_endloop"]
		},
		"_endloop": {
			"prefix": "endloop",
			"body": "_endloop\n"
		},
		"_if simple": {
			"prefix": "if",
			"body": [
				"_if ${1:#--- condition ---}",
				"_then",
				"\t${2:#--- if body ---}",
				"_endif"]
		},
		"_if _endif": {
			"prefix": "if",
			"body": [
				"_if ${1:#--- condition ---}",
				"_then",
				"\t${2:#--- if body ---}",
				"_else",
				"\t${3:# --- else body ---}",
				"_endif"]
		},
		"_endif": {
			"prefix": "endif",
			"body": "_endif\n"
		},
		"_then simple": {
			"prefix": "the",
			"body": [
				"_then",
				"\t${1:#--- if body ---}",
				"_endif"]
		},
		"_then _endif": {
			"prefix": "the",
			"body": [
				"_then",
				"\t${1:#--- if body ---}",
				"_else",
				"\t${2:# --- else body ---}",
				"_endif"]
		},
		"_else _endif": {
			"prefix": "els",
			"body": [
				"_else",
				"\t${1:# --- else body ---}",
				"_endif"]
		},
		"_try _endtry": {
			"prefix": "try",
			"body": [
				"_try ${2:_with a_cond}",
				"\t${3:# --- body ---}",
				"_when ${1|error,user_error,warning,information|}",
				"\t${4:# --- condition handling ---}",
				"_endtry"]
		},
		"_when _endtry": {
			"prefix": "whe",
			"body": [
				"_when ${1|error,user_error,warning,information|}",
				"\t${2:# --- condition handling ---}",
				"_endtry"]
		},
		"_protect _endprotect": {
			"prefix": "protec",
			"body": [
				"_protect",
				"${1:# --- body ---}",
				"_protection",
				"\t${2:# --- protected ---}",
				"_endprotect"]
		},
		"_protection _endprotect": {
			"prefix": "protectio",
			"body": [
				"_protection",
				"\t${1:# --- protected ---}",
				"_endprotect"]
		},
		"_lock _endlock": {
			"prefix": "lock",
			"body": [
				"_lock _self",
				"\t${1:# --- lock body ---}",
				"_endlock"]
		},
		"_pragma": {
			"prefix": "pragma",
			"body": "_pragma(classify_level=${1|basic,advanced,restricted,debug,deprecated|}, topic=${2:CLASS_NAME}, usage=${3|external,internal|})\r\n"
		},
		"_method _endmethod": {
			"prefix": "method",
			"body": [
				"_pragma(classify_level=basic, topic=$1, usage=external)",
				"_method ${1:CLASS_NAME}.${2:METHOD_NAME}()",
				"\t##  Function: ${3}",
				"\t## Arguments: ${4}",
				"\t##   Returns: ${5}",
				"\t${6}",
				"_endmethod\n"]
		},
		"_iter _method _endmethod": {
			"prefix": "iter",
			"body": [
				"_pragma(classify_level=basic, topic=$1)",
				"_iter _method ${1:CLASS_NAME}.${2:METHOD_NAME}()",
				"\t##  Function: ${3}",
				"\t## Arguments: ${4}",
				"\t##   Returns: ${5}",
				"\t# --- body ---",
				"\t_loopbody(${6:RETURN VALUES})",
				"_endmethod\n"]
		},
		"_private _method _endmethod": {
			"prefix": "private",
			"body": [
				"_pragma(classify_level=restricted, topic=$1, usage=internal)",
				"_private _method ${1:CLASS_NAME}.${2:METHOD_NAME}()",
				"\t##  Function: ${3}",
				"\t## Arguments: ${4}",
				"\t##   Returns: ${5}",
				"\t${6}",
				"_endmethod\n"]
		},
		"def_slotted_exemplar": {
			"prefix": "def_slotted_exemplar",
			"body": [
				"_pragma(classify_level=basic, topic={$1})",
				"def_slotted_exemplar(:${1:CLASS_NAME},",
				"\t# --- Slot Definitions ---",
				"\t{:${2:SLOT_NAME}, ${3:DEFAULT_VALUE}, :${4:FLAVOUR}},",
				"\t# --- Parents ---",
				"\t{:${5:PARENT_1, PARENT_2, ...} }",
				")\n"]
		},
		"define_slot_access": {
			"prefix": "define_slot_access",
			"body": [
				"_pragma(classify_level=basic, topic=$1)",
				"${1:CLASS_NAME}.define_slot_access(:${2:SLOT_NAME}, :${3:MODE})\n"]
		},
		"define_shared_constant": {
			"prefix": "define_shared_constant",
			"body": [
				"_pragma(classify_level=basic, topic=$1)",
				"${1:CLASS_NAME}.define_shared_constant(:${2:CONSTANT_NAME},",
				"\t##   Remarks: ${3}",
				"\t##   Returns: ${4}",
				"\t##",
				"\t${2:# --- body ---},",
				":public)\n"]
		},
		"define_shared_variable": {
			"prefix": "define_shared_variable",
			"body": [
				"_pragma(classify_level=basic, topic={$1})",
				"${1:CLASS_NAME}.define_shared_constant(:${2:VARIABLE_NAME},",
				"\t##   Remarks: ${3}",
				"\t##   Returns: ${4}",
				"\t##",
				"\t${2:# --- body ---},",
				":public)\n"]
		},
		"operator": {
			"prefix": "operator",
			"body": [
				"_pragma(classify_level=basic, topic={$1,$2})",
				"define_binary_operator_case(:|${1:OPERATOR}|,",
				"\t${2:<class_1>}, ${3:<class_2>},",
				"\t_proc(a, b)",
				"\t\t##   Remarks: ",
				"\t\t##   Returns: ",
				"\t\t ${4:# --- operator body ---",
				"\t\t _return ${5:VALUE} # --- operator results ---",
				"\t_endproc",
				")\n"]
		},
		"condition": {
			"prefix": "condition",
			"body": [
				"_pragma(classify_level=basic)",
				"condition.define_condition(:${1:CONDITION_NAME},",
				"\t:${2:PARENT_NAME},",
				"\t${3:DATA_NAME_LIST},",
				"\t${3:optional REPORTER},",
				"\t${4:MESSAGE_ACCESSOR}",
				")\n"]
		},
		"pseudo_slot": {
			"prefix": "pseudo_slot",
			"body": [
				"\r\n_pragma(classify_level=basic, topic=$1)",
				"${1:CLASS_NAME}.define_pseudo_slot(:${2:SLOT_NAME},",
				"\t${3:optional DEFAULT_VALUE},",
				"\t${4:FLAG},",
				"\t${5:FLAVOUR}",
				")\n"]
		},
		"register_application": {
			"prefix": ["smallworld_","register_application"],
			"body": [
				"smallworld_product.register_application(${1:NAME}, ",
				"\t${:application}, # application_class_name ",
				"\t#:external_name, ",
				"\t#:description, ",
				"\t#:resource_module_name, ",
				"\t#:icon_location, ",
				"\t#:html_help_file_name, ",
				"\t#:product_name, ",
				"\t#:soc_name, ",
				"\t#:ace_name, ",
				"\t#:hidden, ${|_true,_false|}",
				"\t#:default_application_coordinate_system_name, ",
				"\t#:application_coordinate_system_unit, ${2|:mm,:cm,:ft|}",
					")\n"]
		},
		"magik_session.register": {
			"prefix": ["magik_session","register"],
			"body": [
				"magik_session.register_new(${1:NAME}, ",
				"\t:parent_session, ${2:PARENT_PRODUCT}:${3:PARENT_SESSION}, #  Name of the parent session to start from",
				"\t:package,                ${4|user,sw|}, # Package to load the code", 
				"\t:startup_proc,           ${5:startup},# Session startup proc",
				"\t:open_database_proc,     ${6:open_database}, # Proc for opening the database",
				"\t:add_products,           {},",
				"\t:load_modules,           {},",
				"\t:load_modules_arguments, {},",
				"\t#:optional_products,     {},",
				"\t#:optional_modules,      {},",
				"\t#:load_files,            {},", 
				"\t#:init_build_proc,       {},", 
				"\t#:pre_build_proc,        {},", 
				"\t#:post_build_proc,       {},",
				"\t#:startup_options,       {},",
				"\t#:startup_procedures,    {},",
				"\t#:soc_names,             {},",
				"\t#:load_code_proc,        {},",
				")\n"]
		},
		"%space": {
			"prefix": "%space",
			"body": "%space"
		},
		"%newline": {
			"prefix": "%newline",
			"body": "%newline}"
		},
		"%tab": {
			"prefix": "%tab",
			"body": "%tab"
		},
		"application": {
			"prefix": ["app","smallworld_"],
			"body": "smallworld_product.application(:${1:APPLICATION_NAME})"
		},
		"current_map_view": {
			"prefix": ["map","smallworld_"],
			"body": "smallworld_product.application(:${1:APPLICATION_NAME}).plugin(:maps).current_map_view.map"
		},
		"current_map...": {
			"prefix": ["current_map","current_selection","current_trail","map","smallworld_"],
			"body": "smallworld_product.applications.an_element().plugin(:maps).current_map_view${1|.map,.map.current_selection,.map.trail|}"
		},
		"smallworld_product": {
			"prefix": "smallworld_product",
			"body": "smallworld_product.${1|applications,application_definitions,products|}"
		},
		"spatial_object_manager": {
			"prefix": "soc",
			"body": "manage_soc()"
		},
		"gis_program_manager": {
			"prefix": "gis_",
			"body": "gis_program_manager${1|.ace_top_view,.ace_view,.authorisation_view,.databases,.dataset_pool,.has_open_ace?,.login_name,.open_soc_definitions,.scratch_view,.soc_definitions,.startup_actions,.style_view|}"
		},
		"databases": {
			"prefix": ["gis_","databases"],
			"body": "gis_program_manager.databases"
		},
		"external_": {
			"prefix": "external_",
			"body": "${1|external_binary_input_stream,external_binary_output_stream,external_channel,external_checksum_binary_input_stream,external_checksum_binary_output_stream,external_grid_input_stream,external_ref,external_text_file_mixin,external_text_input_stream,external_text_output_stream,external_text_simple_output_stream,external_xml_input_stream,externally_keyed_collection_mixin|}"
		},
		"!notify": {
			"prefix": "!notify_...!!",
			"body": "${1|!notify_database_data_changes?!,!notify_lwt_state_changes?!|}"
		},
		"show": {
			"prefix":"show(",
			"body": "show($0)"
		},
		"write": {
			"prefix":"write(",
			"body": "write($0)"
		},
		"print": {
			"prefix":"print(",
			"body": "print($0)"
		},
		"debug_print": {
			"prefix":"debug_print(",
			"body": "debug_print($0)"
		},
		"!proc": {
			"prefix":["!abort!","!debugger!","!error!","!traceback!","!warning!"],
			"body": "${1|!abort!(),!debugger!(),!error!(),!traceback!(),!warning!()|}"
		},
		"!current": {
			"prefix": "!current_...!",
			"body": "${1|!current_application!,!current_body!,!current_condition!,!current_coordinate_system!,!current_database!,!current_dsview!,!current_dxf_app_id!,!current_field!,!current_grs!,!current_languages!,!current_locale!,!current_menu_tree!,!current_module!,!current_mpn!,!current_package!,!current_plugin_name!,!current_rendering_context!,!current_spatial_object_controller!,!current_sts!,!current_transaction!,!current_transform!,!current_unit_factor!,!current_validation_record!,!current_world!|}"
		},
		"!outputs": {
			"prefix": ["!output!","!terminal!","!error_output!","!print_length!","!print_float_precision!"],
			"body": "${1|!output!,!terminal!,!error_output!,!print_length!,!print_float_precision!|}"
		}
	}
}
